openapi: 3.0.3
info:
  title: Healthy Gaming Timer API
  version: 1.0.0
  description: |
    Backend for tracking gaming sessions, reminders, and health goals.
servers:
  - url: http://localhost:3000
paths:
  /api/auth/register:
    post:
      summary: Register with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Credentials' }
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }

  /api/auth/login:
    post:
      summary: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Credentials' }
      responses:
        '200':
          description: JWT issued
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /api/auth/google:
    get:
      summary: Redirect to Google OAuth flow
      responses:
        '302':
          description: Redirect

  /api/auth/google/callback:
    get:
      summary: Google returns here; server issues JWT
      responses:
        '200':
          description: JWT issued (same shape as login)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }

  /api/user/profile:
    get:
      summary: Fetch current user
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /api/session/start:
    post:
      summary: Start a gaming session
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Session started
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Session' }

  /api/session/end:
    post:
      summary: End the current session
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                duration: { type: integer, example: 3600 }
      responses:
        '200':
          description: Session summary
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Session' }

  /api/session/stats:
    get:
      summary: Daily and lifetime stats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Stats payload
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Stats' }

  /api/reminders:
    get:
      summary: Get reminder settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Reminder list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Reminder' }
    post:
      summary: Update reminders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: '#/components/schemas/Reminder' }
      responses:
        '200':
          description: Updated reminder list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Reminder' }

  /api/goals:
    get:
      summary: Get health goals
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Goal list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Goal' }
    post:
      summary: Update goal progress
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: '#/components/schemas/Goal' }
      responses:
        '200':
          description: Updated goals
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Goal' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Invalid request
    Unauthorized:
      description: Auth required or token invalid
  schemas:
    Credentials:
      type: object
      required: [ email, password ]
      properties:
        email: { type: string, format: email, example: user@example.com }
        password: { type: string, minLength: 8, example: "hunter2" }
    AuthResponse:
      type: object
      properties:
        token: { type: string, example: "eyJhbGciOi..." }
        user: { $ref: '#/components/schemas/User' }
    User:
      type: object
      properties:
        _id: { type: string }
        email: { type: string, format: email }
        displayName: { type: string }
        googleId: { type: string, nullable: true }
    Session:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        startedAt: { type: string, format: date-time }
        endedAt: { type: string, format: date-time, nullable: true }
        duration: { type: integer, nullable: true }
    Stats:
      type: object
      properties:
        todaySeconds: { type: integer, example: 5400 }
        totalSeconds: { type: integer, example: 72000 }
        goalsCompleted: { type: integer, example: 3 }
    Reminder:
      type: object
      properties:
        type: { type: string, enum: [ water, stretch, posture ] }
        frequencyMinutes: { type: integer, example: 20 }
        enabled: { type: boolean }
    Goal:
      type: object
      properties:
        name: { type: string, example: "Drink 8 cups of water" }
        target: { type: integer, example: 8 }
        progress: { type: integer, example: 5 }
        completed: { type: boolean, example: false }
